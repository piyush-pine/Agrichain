{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "User's phone number."
        },
        "role": {
          "type": "string",
          "description": "User's role (farmer, buyer, logistics, admin)."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates if the user's account is verified."
        },
        "aadhaarVerified": {
          "type": "boolean",
          "description": "Indicates if the user's Aadhaar has been verified."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "role",
        "verified",
        "aadhaarVerified",
        "createdAt"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product listed on the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "category": {
          "type": "string",
          "description": "Category of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "farmerId": {
          "type": "string",
          "description": "Reference to the Farmer who listed the product. (Relationship: Farmer 1:N Product)"
        },
        "status": {
          "type": "string",
          "description": "Status of the product (listed, sold, shipped)."
        },
        "iotData": {
          "type": "string",
          "description": "JSON string that store iot data."
        },
        "qualityCert": {
          "type": "string",
          "description": "URL to the quality certification document."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the product was listed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "category",
        "price",
        "farmerId",
        "status",
        "iotData",
        "qualityCert",
        "createdAt"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed on the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "productId": {
          "type": "string",
          "description": "Reference to the Product being ordered. (Relationship: Product 1:N Order)"
        },
        "buyerId": {
          "type": "string",
          "description": "Reference to the Buyer who placed the order. (Relationship: Buyer 1:N Order)"
        },
        "farmerId": {
          "type": "string",
          "description": "Reference to the Farmer who owns the product in the order. (Relationship: Farmer 1:N Order)"
        },
        "amount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (pending, confirmed, shipped, delivered, paid)."
        },
        "escrowReleased": {
          "type": "boolean",
          "description": "Indicates if the escrow payment has been released."
        },
        "deliveryProof": {
          "type": "string",
          "description": "URL to the delivery proof document."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the order was placed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "productId",
        "buyerId",
        "farmerId",
        "amount",
        "status",
        "escrowReleased",
        "deliveryProof",
        "createdAt"
      ]
    },
    "Shipment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Shipment",
      "type": "object",
      "description": "Represents a shipment of an order on the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shipment."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to the Order being shipped. (Relationship: Order 1:N Shipment)"
        },
        "logisticsId": {
          "type": "string",
          "description": "Reference to the Logistics provider handling the shipment. (Relationship: Logistics 1:N Shipment)"
        },
        "status": {
          "type": "string",
          "description": "Status of the shipment (picked, in-transit, delivered)."
        },
        "locationHistory": {
          "type": "array",
          "description": "History of the shipment's location.",
          "items": {
            "type": "string"
          }
        },
        "conditionLogs": {
          "type": "array",
          "description": "Logs of the shipment's condition (temperature, humidity).",
          "items": {
            "type": "string"
          }
        },
        "deliveryConfirmed": {
          "type": "boolean",
          "description": "Indicates if the delivery has been confirmed."
        },
        "confirmedBy": {
          "type": "string",
          "description": "Method used to confirm delivery (QR/digital signature)."
        }
      },
      "required": [
        "id",
        "orderId",
        "logisticsId",
        "status",
        "locationHistory",
        "conditionLogs",
        "deliveryConfirmed",
        "confirmedBy"
      ]
    },
    "Reward": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Reward",
      "type": "object",
      "description": "Represents a reward earned by a user on the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the reward."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who earned the reward. (Relationship: User 1:N Reward)"
        },
        "type": {
          "type": "string",
          "description": "Type of reward (organic, zero-waste, timely-delivery)."
        },
        "points": {
          "type": "number",
          "description": "Number of points awarded for the reward."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates if the reward has been verified."
        },
        "issuedAt": {
          "type": "string",
          "description": "Timestamp indicating when the reward was issued.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "type",
        "points",
        "verified",
        "issuedAt"
      ]
    },
    "FraudAlert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FraudAlert",
      "type": "object",
      "description": "Represents a fraud alert generated by the AI module on the AgriClear platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the fraud alert."
        },
        "transactionId": {
          "type": "string",
          "description": "Reference to the Transaction that triggered the alert."
        },
        "type": {
          "type": "string",
          "description": "Type of fraud alert (price-spike, fake-quality, duplicate-listing)."
        },
        "confidence": {
          "type": "number",
          "description": "Confidence level of the fraud alert."
        },
        "resolved": {
          "type": "boolean",
          "description": "Indicates if the fraud alert has been resolved."
        },
        "detectedAt": {
          "type": "string",
          "description": "Timestamp indicating when the fraud alert was detected.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "transactionId",
        "type",
        "confidence",
        "resolved",
        "detectedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product listings. Includes denormalized 'farmerId' for authorization independence.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information. Includes denormalized 'buyerId' and 'farmerId' for authorization independence.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            }
          ]
        }
      },
      {
        "path": "/shipments/{shipmentId}",
        "definition": {
          "entityName": "Shipment",
          "schema": {
            "$ref": "#/backend/entities/Shipment"
          },
          "description": "Stores shipment details. Includes denormalized 'logisticsId' for authorization independence.",
          "params": [
            {
              "name": "shipmentId",
              "description": "The unique identifier of the shipment."
            }
          ]
        }
      },
      {
        "path": "/rewards/{rewardId}",
        "definition": {
          "entityName": "Reward",
          "schema": {
            "$ref": "#/backend/entities/Reward"
          },
          "description": "Stores reward information for users.",
          "params": [
            {
              "name": "rewardId",
              "description": "The unique identifier of the reward."
            }
          ]
        }
      },
      {
        "path": "/fraud_alerts/{alertId}",
        "definition": {
          "entityName": "FraudAlert",
          "schema": {
            "$ref": "#/backend/entities/FraudAlert"
          },
          "description": "Stores fraud alerts detected by the AI module.",
          "params": [
            {
              "name": "alertId",
              "description": "The unique identifier of the fraud alert."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure prioritizes authorization independence and QAPs. User data is stored under `/users/{uid}`, adhering to path-based ownership. Products are stored in `/products/{productId}`, with the `farmerId` denormalized to enable secure listing without requiring `get()` calls to the user document. Orders are stored in `/orders/{orderId}`, and they denormalize both `buyerId` and `farmerId` to facilitate secure read access for both parties without relying on `get()` calls. Shipments are located in `/shipments/{shipmentId}` and store the `logisticsId` for access control. Rewards are stored in `/rewards/{rewardId}` and `fraud_alerts/{alertId}` are globally accessible. These structures, combined with security rules based on `request.auth.uid` and the denormalized fields, ensure that all list operations are secure, as rules can directly filter based on the user's role and the document's properties."
  }
}