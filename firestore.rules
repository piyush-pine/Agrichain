/**
 * @fileOverview This ruleset enforces a role-based access control model for the AgriClear platform,
 * ensuring that users can only access data relevant to their roles (farmer, buyer, logistics, admin).
 * Data is structured to support efficient authorization without requiring costly `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible to the user and admins.
 * - /products/{productId}: Stores product listings, accessible to buyers for reading and farmers for creation/updates.
 * - /orders/{orderId}: Stores order information, accessible to buyers who created the order and which involve their products.
 * - /shipments/{shipmentId}: Stores shipment details, accessible to logistics providers assigned to the shipment and buyers/farmers involved in the order.
 * - /rewards/{rewardId}: Stores reward information, writable only by admins.
 * - /fraud_alerts/{alertId}: Stores fraud alerts, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data. Admins can read all user profiles.
 * - Farmers can create and update products, with the `farmerId` field used for ownership validation.
 * - Buyers can create orders. Farmers can view orders which involve their products.
 * - Logistics providers can update shipments assigned to them. Buyers and farmers can read shipment statuses.
 * - Only admins can write to the rewards and fraud_alerts collections.
 * - Listing of user documents is disallowed for non-admins.
 *
 * Denormalization for Authorization:
 * - Products, Orders, and Shipments include denormalized user IDs (`farmerId`, `buyerId`, `logisticsId`)
 *   to enable direct authorization without additional reads.
 *
 * Structural Segregation:
 * - There is no structural segregation in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) User with matching {userId} can read their profile.
     * @allow (list) Admin can read any user profile.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete user profiles directly.
     * @deny (get, list) Non-admin users cannot list all user profiles.
     * @principle Enforces user-ownership for reads and admin-only for all writes.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is an admin.
      function isAdmin() {
        return false; // TODO: Implement admin check (e.g., from custom claim).
      }

      // Allow the user to read their own profile data.
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of all users

      // Allow the user to create their own profile data, but enforce ownership on creation.
      allow create: if isOwner(userId) && request.auth.uid == userId;

      // Allow the user to update their own profile data, but only if they are the owner and the ID is immutable.
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile data, but only if they are the owner and the document exists.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to product listings.
     * @path /products/{productId}
     * @allow (create, update) Farmer can create/update their own products (farmerId must match).
     * @allow (get, list) Buyers can read all products.
     * @deny (delete) Only admins can delete products (not implemented in this example).
     * @principle Enforces farmer-ownership for writes and public read access.
     */
    match /products/{productId} {
      // Helper function to check if the requesting user is the owner (farmer) of the product.
      function isProductOwner(farmerId) {
        return request.auth.uid == farmerId;
      }

      // Allow anyone to read product listings.
      allow get, list: if true;

      // Allow farmers to create product listings, but enforce ownership and the ID should equal the user id.
      allow create: if request.resource.data.farmerId == request.auth.uid;

      // Allow farmers to update their own product listings.
      allow update: if request.auth.uid == resource.data.farmerId;

      // Disallow anyone from deleting product listings (except perhaps an admin, not implemented).
      allow delete: if false;
    }

    /**
     * @description Controls access to order information.
     * @path /orders/{orderId}
     * @allow (create) Buyers can create orders.
     * @allow (get) Buyers and Farmers can view orders related to them (buyerId or farmerId must match).
     * @deny (update, delete) Only backend functions can update/delete orders.
     * @principle Enforces buyer-ownership for creation and shared access for reads.
     */
    match /orders/{orderId} {
      // Helper function to check if the requesting user is the buyer of the order.
      function isBuyer(buyerId) {
        return request.auth.uid == buyerId;
      }

      // Helper function to check if the requesting user is the farmer of the order.
      function isFarmer(farmerId) {
        return request.auth.uid == farmerId;
      }

      // Allow buyers to create orders, buyerId = user id
      allow create: if request.resource.data.buyerId == request.auth.uid;

      // Allow buyers and farmers to read orders related to them.
      allow get: if resource.data.buyerId == request.auth.uid || resource.data.farmerId == request.auth.uid;
      allow list: if false;

      // Disallow anyone from updating or deleting orders (except perhaps a backend function).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to shipment details.
     * @path /shipments/{shipmentId}
     * @allow (update) Logistics providers can update assigned shipments (logisticsId must match).
     * @allow (get, list) Buyers and farmers can read shipment status.
     * @deny (create, delete) Only backend functions can create/delete shipments.
     * @principle Enforces logistics-ownership for writes and shared access for reads.
     */
    match /shipments/{shipmentId} {
      // Helper function to check if the requesting user is the logistics provider for the shipment.
      function isLogisticsProvider(logisticsId) {
        return request.auth.uid == logisticsId;
      }

      // Allow logistics providers to update assigned shipments.
      allow update: if resource.data.logisticsId == request.auth.uid;

      // Allow buyers and farmers to read shipment statuses, need to validate the buyer and farmer ids on the order document.
      allow get: if true; // Buyers and Farmers can read all shipments
      allow list: if false; // Buyers and Farmers can list all shipments

      // Disallow anyone from creating or deleting shipments (except perhaps a backend function).
      allow create: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to reward information.
     * @path /rewards/{rewardId}
     * @deny (create, update, delete, get, list) Only admins can write to this collection.
     * @principle Enforces admin-only access.
     */
    match /rewards/{rewardId} {
      // Disallow anyone from creating, updating, deleting, getting, or listing rewards (except perhaps an admin function).
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      allow get: if false;
      allow list: if false;
    }

    /**
     * @description Controls access to fraud alerts.
     * @path /fraud_alerts/{alertId}
     * @deny (create, update, delete, get, list) Only admins can write to this collection.
     * @principle Enforces admin-only access.
     */
    match /fraud_alerts/{alertId} {
      // Disallow anyone from creating, updating, deleting, getting, or listing fraud alerts (except perhaps an admin function).
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      allow get: if false;
      allow list: if false;
    }
  }
}