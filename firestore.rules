/**
 * @file Firestore Security Rules for AgriClear Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-related data,
 * with public read access and owner-only write access for product listings. Admin access is
 * controlled through a dedicated `/roles_admin` collection, where the existence of a document
 * grants administrative privileges.
 *
 * @data_structure The data is organized hierarchically. User data and associated profiles
 * (FarmerProfile, Buyer, LogisticsProvider, Admin) are stored under `/users/{userId}`.
 * Product listings are stored in the top-level `/productListings` collection, with denormalized
 * `farmerId` for authorization. Orders are stored in `/orders` with denormalized `buyerId`
 * and `productId`. A dedicated collection `/roles_admin/{uid}` is used for admin role management.
 *
 * @key_security_decisions
 *   - User data is strictly controlled by the owning user.
 *   - Product listings are publicly readable but only writable by the owning farmer.
 *   - Admin privileges are granted based on the existence of a document in `/roles_admin`.
 *   - Listing of user documents is only allowed for the owner.
 *
 * @denormalization_for_authorization
 *   - `ProductListing` includes `farmerId` to avoid requiring `get()` calls to `FarmerProfile`
 *     for authorization.
 *   - `Order` includes `buyerId` and `productId` to simplify authorization checks.
 *
 * @structural_segregation
 *   - User-specific data is stored under `/users/{userId}` for clear ownership.
 *   - Publicly readable product listings are stored in the top-level `/productListings` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get, list, update, delete) - Authenticated user can only access their own user document.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to farmer profile documents.
     * @path /users/{userId}/farmerProfile
     * @allow (create) - Authenticated user can create their own farmer profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own farmer profile.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on farmer profile documents.
     */
    match /users/{userId}/farmerProfile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product listing documents.
     * @path /productListings/{productListingId}
     * @allow (get, list) - Any user can read product listings.
     * @allow (create) - Authenticated user can create a product listing if they are the owner.
     * @allow (update, delete) - Authenticated user can only update/delete their own product listings.
     * @deny (create) - If the farmerId in the request does not match the authenticated user's ID.
     * @principle Allows public read access, but enforces ownership for writes on product listings.
     */
    match /productListings/{productListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(farmerId) {
        return request.auth.uid == farmerId;
      }

      function isExistingOwner(productListingId) {
          return resource.data.farmerId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(productListingId);
      allow delete: if isSignedIn() && isExistingOwner(productListingId);
    }

    /**
     * @description Controls access to buyer documents.
     * @path /users/{userId}/buyer
     * @allow (create) - Authenticated user can create their own buyer document.
     * @allow (get, list, update, delete) - Authenticated user can only access their own buyer document.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on buyer documents.
     */
    match /users/{userId}/buyer {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (create) - Any authenticated user can create an order.
     * @allow (get, list) - Any user can read order.
     * @allow (update, delete) - No one can update/delete order.
     * @deny (create) - If the buyerId or productId in the request does not match the authenticated user's ID.
     * @principle No ownership for all operations on order documents.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to logistics provider documents.
     * @path /users/{userId}/logisticsProvider
     * @allow (create) - Authenticated user can create their own logistics provider document.
     * @allow (get, list, update, delete) - Authenticated user can only access their own logistics provider document.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on logistics provider documents.
     */
    match /users/{userId}/logisticsProvider {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to shipment documents.
     * @path /shipments/{shipmentId}
     * @allow (create) - Any authenticated user can create a shipment.
     * @allow (get, list) - Any user can read shipment.
     * @allow (update, delete) - No one can update/delete shipment.
     * @deny (create) - If the orderId or logisticsProviderId in the request does not match the authenticated user's ID.
     * @principle No ownership for all operations on shipment documents.
     */
    match /shipments/{shipmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to admin documents.
     * @path /users/{userId}/admin
     * @allow (create) - Authenticated user can create their own admin document.
     * @allow (get, list, update, delete) - Authenticated user can only access their own admin document.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on admin documents.
     */
    match /users/{userId}/admin {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to escrow transaction documents.
     * @path /escrowTransactions/{escrowTransactionId}
     * @allow (create) - Any authenticated user can create a escrowTransaction.
     * @allow (get, list) - Any user can read escrowTransaction.
     * @allow (update, delete) - No one can update/delete escrowTransaction.
     * @deny (create) - If the orderId in the request does not match the authenticated user's ID.
     * @principle No ownership for all operations on escrowTransaction documents.
     */
    match /escrowTransactions/{escrowTransactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to fraud alert documents.
     * @path /fraudAlerts/{fraudAlertId}
     * @allow (create) - Any authenticated user can create a fraudAlert.
     * @allow (get, list) - Any user can read fraudAlert.
     * @allow (update, delete) - No one can update/delete fraudAlert.
     * @deny (create) - If the transactionId in the request does not match the authenticated user's ID.
     * @principle No ownership for all operations on fraudAlert documents.
     */
    match /fraudAlerts/{fraudAlertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sustainability reward documents.
     * @path /sustainabilityRewards/{sustainabilityRewardId}
     * @allow (create) - Any authenticated user can create a sustainabilityReward.
     * @allow (get, list) - Any user can read sustainabilityReward.
     * @allow (update, delete) - No one can update/delete sustainabilityReward.
     * @deny (create) - If the farmerId in the request does not match the authenticated user's ID.
     * @principle No ownership for all operations on sustainabilityReward documents.
     */
    match /sustainabilityRewards/{sustainabilityRewardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Grants admin access based on the existence of a document in this collection.
      * @path /roles_admin/{userId}
      * @allow (get, list, create, update, delete) - Only the user with a matching UID can access this document.
      * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
      * @principle Uses "Existence over Content" to grant admin privileges.
      */
     match /roles_admin/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}