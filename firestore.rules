/**
 * @fileoverview Firestore Security Rules for AgriClear Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access with owner-only writes for product listings.
 * Admin privileges are granted based on the existence of a document in the
 * `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles and acts as the root for
 *   user-specific data.
 * - /users/{userId}/farmerProfile: Farmer profiles, owned by the user.
 * - /users/{userId}/buyer: Buyer profiles, owned by the user.
 * - /users/{userId}/logisticsProvider: Logistics Provider profiles, owned by the user.
 * - /users/{userId}/admin: Admin profiles, owned by the user.
 * - /productListings/{productListingId}: Publicly readable product listings,
 *   write-protected to the owner (farmer). The `farmerId` field is denormalized
 *   for efficient authorization.
 * - /orders/{orderId}: Orders, with `buyerId` and `productId` denormalized for
 *   authorization.
 * - /shipments/{shipmentId}: Shipment information.
 * - /escrowTransactions/{escrowTransactionId}: Escrow transaction details.
 * - /fraudAlerts/{fraudAlertId}: Fraud alert information.
 * - /sustainabilityRewards/{sustainabilityRewardId}: Sustainability reward information.
 * - /roles_admin/{userId}: Collection used to store admin roles. Existence of a document grants admin access. (Existence over Content).
 *
 * Key Security Decisions:
 * - User listing is denied.
 * - Public read access is granted for product listings.
 * - Default security posture for ambiguous relationships is strict owner-only
 *   access.
 *
 * Denormalization for Authorization:
 * - ProductListing documents include the `farmerId` to allow direct
 *   authorization checks without requiring additional reads.
 * - Order documents include the `buyerId` and `productId` for similar reasons.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} collection to
 *   maintain clear ownership and simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the authenticated user has admin privileges based on the existence of a document in `/roles_admin/{userId}`.
      */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces document ownership for writes, ensuring only the owner can modify data.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their profile.
     * @deny (create) User with ID not matching auth.uid cannot create a profile.
     * @allow (get, list) Authenticated user can read their own profile.
     * @deny (get, list) Authenticated user cannot read other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict ownership for farmer profiles under a user's data tree.
     * @path /users/{userId}/farmerProfile
     * @allow (create) User with ID matching the path can create their farmer profile.
     * @deny (create) User with ID not matching the path cannot create a farmer profile.
     * @allow (get, list) Authenticated user can read their own farmer profile.
     * @deny (get, list) Authenticated user cannot read other user's farmer profiles.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/farmerProfile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product listings, but restricts write access to the farmer who owns the listing.
     * @path /productListings/{productListingId}
     * @allow (get, list) Any user can read product listings.
     * @allow (create) Authenticated farmer can create a product listing with their farmerId.
     * @deny (create) Authenticated user cannot create a listing with someone else's farmerId.
     * @allow (update, delete) Only the farmer who owns the listing can update or delete it.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /productListings/{productListingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.farmerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.farmerId == request.auth.uid && resource != null;
    }

    /**
     * @description Enforces strict ownership for buyer profiles under a user's data tree.
     * @path /users/{userId}/buyer
     * @allow (create) User with ID matching the path can create their buyer profile.
     * @deny (create) User with ID not matching the path cannot create a buyer profile.
     * @allow (get, list) Authenticated user can read their own buyer profile.
     * @deny (get, list) Authenticated user cannot read other user's buyer profiles.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/buyer {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to order information.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces strict ownership for logistics provider profiles under a user's data tree.
     * @path /users/{userId}/logisticsProvider
     * @allow (create) User with ID matching the path can create their logistics provider profile.
     * @deny (create) User with ID not matching the path cannot create a logistics provider profile.
     * @allow (get, list) Authenticated user can read their own logistics provider profile.
     * @deny (get, list) Authenticated user cannot read other user's logistics provider profiles.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/logisticsProvider {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to shipment information.
     * @path /shipments/{shipmentId}
     */
    match /shipments/{shipmentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces strict ownership for admin profiles under a user's data tree.
     * @path /users/{userId}/admin
     * @allow (create) User with ID matching the path can create their admin profile.
     * @deny (create) User with ID not matching the path cannot create an admin profile.
     * @allow (get, list) Authenticated user can read their own admin profile.
     * @deny (get, list) Authenticated user cannot read other user's admin profiles.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/admin {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to escrow transaction details.
     * @path /escrowTransactions/{escrowTransactionId}
     */
    match /escrowTransactions/{escrowTransactionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to fraud alert information.
     * @path /fraudAlerts/{fraudAlertId}
     */
    match /fraudAlerts/{fraudAlertId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to sustainability reward information.
     * @path /sustainabilityRewards/{sustainabilityRewardId}
     */
    match /sustainabilityRewards/{sustainabilityRewardId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}