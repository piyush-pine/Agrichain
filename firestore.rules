/**
 * @file Firebase Security Rules for AgriClear Platform
 * @corePhilosophy This ruleset prioritizes authorization independence and ensures that users can only access data they are authorized to see.
 *  It uses denormalization to avoid costly `get()` calls and enforce ownership.
 * @dataStructure The database is structured as follows:
 *   - `/users/{userId}`: Stores user profiles, accessible only by the user themselves.
 *   - `/products/{productId}`: Stores product listings, accessible by anyone for read operations, but create/update/delete are restricted to the farmer who owns the product. The `farmerId` is denormalized for efficient rule enforcement.
 *   - `/orders/{orderId}`: Stores order information, accessible by the buyer and the farmer involved in the order. Both `buyerId` and `farmerId` are denormalized.
 *   - `/shipments/{shipmentId}`: Stores shipment details, with access restricted to the logistics provider. The `logisticsId` is denormalized.
 *   - `/rewards/{rewardId}`: Stores reward information, globally accessible.
 *   - `/fraud_alerts/{alertId}`: Stores fraud alerts, globally accessible.
 * @keySecurityDecisions
 *   - User listing is not allowed to prevent unauthorized data access.
 *   - All write operations are protected by authorization checks to prevent unauthorized data modification.
 *   - Read operations on products are public, while write operations are restricted to the owner.
 * @denormalizationForAuthorization The `farmerId`, `buyerId`, and `logisticsId` fields are denormalized in the `products`, `orders`, and `shipments` collections, respectively, to simplify authorization rules and avoid costly `get()` calls.
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product listings, but restricts write access to the farmer who owns the product.
     *  The `farmerId` field in the product document is used to enforce ownership.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth.uid == resource.data.farmerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.farmerId
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /products/{productId} {
      function isOwner(farmerId) {
        return request.auth.uid == farmerId;
      }

       function isExistingOwner(farmerId) {
        return isOwner(farmerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.farmerId);
      allow update: if isExistingOwner(resource.data.farmerId);
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Restricts access to order documents to the buyer and the farmer involved in the order. The `buyerId` and `farmerId` fields in the order document are used to grant access.
     * @path /orders/{orderId}
     * @allow (get, list) if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.farmerId
     * @allow (create, update, delete) if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.farmerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.buyerId && request.auth.uid != resource.data.farmerId
     * @principle Enforces shared access for order-related information.
     */
    match /orders/{orderId} {
       function isBuyerOrFarmer(buyerId, farmerId) {
        return request.auth.uid == buyerId || request.auth.uid == farmerId;
      }

      function isExistingBuyerOrFarmer(buyerId, farmerId) {
        return isBuyerOrFarmer(buyerId, farmerId) && resource != null;
      }

      allow get: if isBuyerOrFarmer(resource.data.buyerId, resource.data.farmerId);
      allow list: if request.auth.uid != null;
      allow create: if isBuyerOrFarmer(request.resource.data.buyerId, request.resource.data.farmerId);
      allow update: if isExistingBuyerOrFarmer(resource.data.buyerId, resource.data.farmerId);
      allow delete: if isExistingBuyerOrFarmer(resource.data.buyerId, resource.data.farmerId);
    }

    /**
     * @description Restricts access to shipment documents to the logistics provider handling the shipment. The `logisticsId` field in the shipment document is used to grant access.
     * @path /shipments/{shipmentId}
     * @allow (get, list) if request.auth.uid == resource.data.logisticsId
     * @allow (create, update, delete) if request.auth.uid == resource.data.logisticsId
     * @deny (create, update, delete) if request.auth.uid != resource.data.logisticsId
     * @principle Enforces access control based on the logistics provider.
     */
    match /shipments/{shipmentId} {
       function isLogisticsProvider(logisticsId) {
        return request.auth.uid == logisticsId;
      }

      function isExistingLogisticsProvider(logisticsId) {
        return isLogisticsProvider(logisticsId) && resource != null;
      }

      allow get: if isLogisticsProvider(resource.data.logisticsId);
      allow list: if request.auth.uid != null;
      allow create: if isLogisticsProvider(request.resource.data.logisticsId);
      allow update: if isExistingLogisticsProvider(resource.data.logisticsId);
      allow delete: if isExistingLogisticsProvider(resource.data.logisticsId);
    }

    /**
     * @description Allows public read access to reward documents.
     * @path /rewards/{rewardId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always, as write operations are not permitted.
     * @principle Allows public reads, but restricts all write operations.
     */
    match /rewards/{rewardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to fraud alert documents.
     * @path /fraud_alerts/{alertId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always, as write operations are not permitted.
     * @principle Allows public reads, but restricts all write operations.
     */
    match /fraud_alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}