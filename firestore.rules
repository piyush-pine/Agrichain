/**
 * @fileoverview Firestore Security Rules for AgriClear platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for most data, with public read access to product listings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /products/{productId}: Stores product listings, publicly readable but writable only by the product's owner (farmer).
 * - /orders/{orderId}: Stores order information, writable by the buyer and farmer involved.
 * - /shipments/{shipmentId}: Stores shipment details, writable by the logistics provider.
 * - /rewards/{rewardId}: Stores reward information, writable by platform.
 * - /fraud_alerts/{alertId}: Stores fraud alerts, writable by the AI module.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Product listings are publicly readable to facilitate browsing, but only the owner can modify or delete them.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Product documents contain a `farmer_id` field to enable direct ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can read their own profile.
     * @allow (create) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can create their own profile.
     * @allow (update) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can update their own profile.
     * @allow (delete) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can delete their own profile.
     * @deny (get) User with ID 'otherUserId' cannot read user profile 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @deny (create) User with ID 'otherUserId' cannot create user profile 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @deny (update) User with ID 'otherUserId' cannot update user profile 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @deny (delete) User with ID 'otherUserId' cannot delete user profile 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @principle Enforces user-ownership for profile data, preventing unauthorized access and modification.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product listing documents.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get) Any user can read a product listing.
     * @allow (list) Any user can list product listings.
     * @allow (create) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can create a product listing with farmer_id 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @allow (update) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can update a product listing they own (farmer_id).
     * @allow (delete) User with ID 'EweVZVaQogUBykO1U1QWdvqbNYz2' can delete a product listing they own (farmer_id).
     * @deny (create) User with ID 'otherUserId' cannot create a product listing with farmer_id 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @deny (update) User with ID 'otherUserId' cannot update a product listing owned by 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @deny (delete) User with ID 'otherUserId' cannot delete a product listing owned by 'EweVZVaQogUBykO1U1QWdvqbNYz2'.
     * @principle Allows public read access to product listings while enforcing owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.farmer_id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.farmer_id);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.farmer_id);
    }

    /**
     * @description Controls access to order documents.
     * @path /databases/{database}/documents/orders/{orderId}
     * TODO: Add more specific allow and deny examples after clarifying order access patterns.
     * @principle Restricts order access to involved parties (buyer and farmer).
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to shipment documents.
     * @path /databases/{database}/documents/shipments/{shipmentId}
     * TODO: Add more specific allow and deny examples after clarifying shipment access patterns.
     * @principle Restricts shipment access to the logistics provider.
     */
    match /shipments/{shipmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to reward documents.
     * @path /databases/{database}/documents/rewards/{rewardId}
     * TODO: Add more specific allow and deny examples after clarifying reward access patterns.
     * @principle Restricts reward creation and modification to the platform.
     */
    match /rewards/{rewardId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to fraud alert documents.
     * @path /databases/{database}/documents/fraud_alerts/{alertId}
     * TODO: Add more specific allow and deny examples after clarifying fraud alert access patterns.
     * @principle Restricts fraud alert access to the AI module or authorized personnel.
     */
    match /fraud_alerts/{alertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}