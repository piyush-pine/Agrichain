/**
 * @file Firestore Security Rules for AgriClear Platform
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and cart data,
 *                  and a public-read, owner-write model for products. Orders and Shipments are globally accessible but updates are restricted.
 *                  Rewards are publicly accessible, while Fraud Alerts can only be accessed by a service account (simulated by always denying access).
 *
 * @data_structure
 *   - /users/{userId}: User profile data, accessible only by the user.
 *   - /users/{userId}/cart/{productId}: Cart items, accessible only by the user.
 *   - /products/{productId}: Product listings, publicly readable, writable only by the farmer who created the listing.
 *   - /orders/{orderId}: Order information, publicly readable.
 *   - /shipments/{shipmentId}: Shipment details, publicly readable.
 *   - /rewards/{rewardId}: Reward information, publicly readable.
 *   - /fraud_alerts/{alertId}: Fraud alerts, access is denied to all.
 *
 * @key_security_decisions
 *   - Users can only access their own profile and cart data.
 *   - Product listings are publicly readable but only the owner can modify them.
 *   - Listing of users is disallowed for privacy reasons.
 *   - Fraud alerts are not accessible.
 *
 * @denormalization_for_authorization
 *   - Products have a `farmer_id` field that is used to enforce ownership for write operations.
 *   - Orders have `buyer_id` and `farmer_id`, but those are not currently used for special auth rules.
 *   - Shipments have `logistics_id` but it is not currently used for special auth rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to items in a user's shopping cart.
     * @path /users/{userId}/cart/{productId}
     * @allow (create) User with ID 'user123' can add a product to their cart.
     * @allow (get) User with ID 'user123' can view an item in their cart.
     * @allow (update) User with ID 'user123' can update the quantity of an item in their cart.
     * @allow (delete) User with ID 'user123' can remove an item from their cart.
     * @deny (create) User with ID 'user456' cannot add an item to user 'user123's cart.
     * @deny (get) User with ID 'user456' cannot view an item in user 'user123's cart.
     * @principle Restricts access to a user's own cart data.
     */
    match /users/{userId}/cart/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to product listing documents.
     * @path /products/{productId}
     * @allow (get) Any user can read product listings.
     * @allow (list) Any user can list product listings.
     * @allow (create) User with ID 'farmer123' can create a product listing with farmer_id 'farmer123'.
     * @allow (update) User with ID 'farmer123' can update their own product listing.
     * @allow (delete) User with ID 'farmer123' can delete their own product listing.
     * @deny (create) User with ID 'buyer456' cannot create a product listing with farmer_id 'farmer123'.
     * @deny (update) User with ID 'buyer456' cannot update a product listing owned by 'farmer123'.
     * @principle Allows public read access but restricts write access to the owner (farmer).
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(farmerId) {
        return request.auth.uid == farmerId;
      }

        function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.farmer_id;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmer_id == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.farmer_id == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.farmer_id == request.auth.uid;
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get) Any user can read order information.
     * @allow (list) Any user can list order information.
     * @deny (create) No create access.
     * @deny (update) No update access.
     * @deny (delete) No delete access.
     * @principle Allows public read access, but restricts writes.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to shipment documents.
     * @path /shipments/{shipmentId}
     * @allow (get) Any user can read shipment details.
     * @allow (list) Any user can list shipment details.
     * @deny (create) No create access.
     * @deny (update) No update access.
     * @deny (delete) No delete access.
     * @principle Allows public read access, but restricts writes.
     */
    match /shipments/{shipmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to reward documents.
     * @path /rewards/{rewardId}
     * @allow (get) Any user can read reward information.
     * @allow (list) Any user can list reward information.
     * @deny (create) No create access.
     * @deny (update) No update access.
     * @deny (delete) No delete access.
     * @principle Allows public read access, but restricts writes.
     */
    match /rewards/{rewardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to fraud alert documents. Access is denied to all.
     * @path /fraud_alerts/{alertId}
     * @deny (get) No get access.
     * @deny (list) No list access.
     * @deny (create) No create access.
     * @deny (update) No update access.
     * @deny (delete) No delete access.
     * @principle Restricts access to fraud alerts.
     */
    match /fraud_alerts/{alertId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}